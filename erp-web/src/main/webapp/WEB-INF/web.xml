<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">


    <!-- 上下文参数：设置全局参数，相当于application域中数据。
    String str = applicaion.getInitParameter("contextConfigLocation"); //  ServletContext
 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:spring-config/application-context.xml</param-value>
    </context-param>


    <!-- 监听器:
在服务器启动时，加载应用程序，创建application对象，当application对象被创建，监听器执行初始化方法，构造IOC容器对象；
并将IOC容器对象存放application域中。
ApplicationContext ioc = WebApplicationContextUtils.getWebApplicationContext(application);
-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

<!--    1.在父亲启动过程中，将当前项目上下文路径存放到application域中，给页面使用，
    好处：
    这样在页面上，就不用把项目名写死了，便于随时更改项目名，每次加载页面，都可以动态从项目中获取项目名；-->
    <listener>
        <listener-class>com.xxx.erp.common.web.listener.StartUpAndShutDownSystemListener</listener-class>
    </listener>

    <!--shiro 代理过滤器 -->
<!--
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>*.action</url-pattern>
        <url-pattern>*.html</url-pattern>
        <url-pattern>*.jsp</url-pattern>
        <url-pattern>*</url-pattern>
    </filter-mapping>

-->

    <!-- 字符编码过滤器
        只能解决POST请求乱码问题。
        GET请求乱码需要Tomcat解决：tomcat/conf/server.xml  URIEncoding="UTF-8" L65
    -->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 强制将响应字符编码与请求字符编码保持一致。 -->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
        <!-- 过滤器默认只对请求进行过滤，如果希望对服务器内存转发也进行过滤，需要配置过滤规则。
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        -->
    </filter-mapping>


    <!-- 支持REST风格：可以将POST请求转换为PUT或DELETE -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <servlet-name>springmvc</servlet-name>
    </filter-mapping>


    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc-context.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- 欢迎页面： -->
    <welcome-file-list>
        <welcome-file>helloworld.jsp</welcome-file>
    </welcome-file-list>


</web-app>
